export declare class Injector {
    static INSTANCE: Injector;
    private injectables;
    static provide(type: any, instance?: any): void;
    static construct<T>(clazz: any, injectables?: InjectableList): T;
    static constructAndProvide(clazz: any, injectables?: InjectableList): void;
    static get<T>(type: TypeOf<T>, extras: InjectableMap): T;
    static compile(types: any[], injectables: InjectableList): any[];
    /**
     * Make a class/value accessible globally using the Injector.
     */
    provide(type: any, instance?: any): void;
    /**
     * Construct a class using global injectables.
     */
    construct<T>(clazz: any, injectables?: InjectableList): T;
    constructAndProvide(clazz: any, injectables?: InjectableList): void;
    /**
     * Get an injectable by type
     */
    get<T>(type: TypeOf<T>, extras: InjectableMap): T;
    /**
     * Returns an array of values from the injector based on the types given.
     */
    compile(types: any[], injectables?: InjectableList): any[];
    fromArray<T>(injectables: any[], type: any): T;
}
export declare type InjectableMap = Map<any, any>;
export declare type InjectableList = InjectableMap | any[];
export interface TypeOf<T> {
    new (...args: any[]): T;
}
